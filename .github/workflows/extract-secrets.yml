name: Extract Repository Secrets

# Only allow manual triggering for security
on:
  workflow_dispatch:
    inputs:
      output_filename:
        description: 'Filename for secrets output (without extension)'
        required: false
        default: 'github-secrets'
        type: string

jobs:
  extract-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SERVER_SSH_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Create and transfer secrets file
        env:
          HOST: site.beyondbetter.app
          USER: deploy
          OUTPUT_FILE: ${{ github.event.inputs.output_filename || 'github-secrets' }}
        run: |
          # Create temporary secrets file locally
          cat > secrets.env << 'EOF'
          # GitHub Repository Secrets Export
          # Repository: ${{ github.repository }}
          # Exported: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          # APPLE_API_ISSUER=${{ secrets.APPLE_API_ISSUER }}
          # APPLE_API_KEY=${{ secrets.APPLE_API_KEY }}
          # APPLE_API_KEY_PATH=${{ secrets.APPLE_API_KEY_PATH }}
          # APPLE_API_KEY_VALUE=${{ secrets.APPLE_API_KEY_VALUE }}
          # APPLE_CERTIFICATE=${{ secrets.APPLE_CERTIFICATE }}
          # APPLE_CERTIFICATE_PASSWORD=${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          # APPLE_ID=${{ secrets.APPLE_ID }}
          # APPLE_ID_PASSWORD=${{ secrets.APPLE_ID_PASSWORD }}
          # APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}
          # GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
          # GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
          # KEYCHAIN_PASSWORD=${{ secrets.KEYCHAIN_PASSWORD }}
          # KNOWN_HOSTS=${{ secrets.KNOWN_HOSTS }}
          # SERVER_SSH_KEY=${{ secrets.SERVER_SSH_KEY }}
          # TAURI_SIGNING_PRIVATE_KEY=${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          # TAURI_SIGNING_PRIVATE_KEY_PASSWORD=${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          
          EOF
          
          # Create timestamped filename
          TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
          REMOTE_FILE="/home/deploy/${OUTPUT_FILE}-${TIMESTAMP}.env"
          
          echo "Transferring secrets to: $REMOTE_FILE"
          
          # Transfer the file via SSH
          scp secrets.env $USER@$HOST:"$REMOTE_FILE"
          
          # Set secure permissions on the remote file
          ssh $USER@$HOST << EOF_SSH
            chmod 600 "$REMOTE_FILE"
            echo "Secrets file created at: $REMOTE_FILE"
            echo "File permissions set to 600 (owner read/write only)"
            ls -la "$REMOTE_FILE"
          EOF_SSH
          
          # Clean up local file
          rm secrets.env
          
          echo "✅ Secrets successfully transferred to server"
          echo "📁 Remote location: $REMOTE_FILE"
          echo "🔒 File permissions: 600 (owner only)"
          echo ""
          echo "⚠️  IMPORTANT: Remember to delete this file from the server after use!"
          echo "    Command: ssh $USER@$HOST 'rm \"$REMOTE_FILE\"'"

      - name: Cleanup reminder
        if: success()
        run: |
          echo "::notice title=Cleanup Required::Don't forget to delete the secrets file from the server once you've copied the secrets to your target repository!"