name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: '0.0.0'
  push:
    branches:
      - main
      - release-build-testing

permissions:
  contents: write

jobs:
  build-binaries:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@61fe2df320078202e33d7d5ad347e7dcfa0e8f31  # v1.1.2
        with:
          deno-version: v2.x

      - name: Build CLI for ${{ matrix.target }}
        run: |
          cd cli
          deno compile --allow-env --allow-net --allow-read --allow-run --allow-write --target ${{ matrix.target }} --output ../build/bb${{ matrix.target == 'x86_64-pc-windows-msvc' && '.exe' || '' }} src/main.ts

      - name: Build API for ${{ matrix.target }}
        run: |
          cd api
          deno run --allow-read --allow-run --allow-write scripts/compile.ts --target ${{ matrix.target }} --output ../build/bb-api${{ matrix.target == 'x86_64-pc-windows-msvc' && '.exe' || '' }}

      - name: Create install script (Unix)
        if: matrix.target != 'x86_64-pc-windows-msvc'
        run: |
          echo '#!/bin/sh' > build/install.sh
          echo 'cp bb /usr/local/bin/' >> build/install.sh
          echo 'cp bb-api /usr/local/bin/' >> build/install.sh
          echo 'chmod +x /usr/local/bin/bb /usr/local/bin/bb-api' >> build/install.sh
          chmod +x build/install.sh

      - name: Copy README and INSTALL
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp README.md build/README.txt
            cp INSTALL.md build/INSTALL.txt
          else
            cp README.md INSTALL.md build/
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bb-${{ matrix.target }}
          path: build/*

  build-dui:
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - os: macos-latest
            target: "aarch64-apple-darwin"
            arch: "aarch64"
            name: "Apple Silicon"
            platform: "macos"
          - os: macos-latest
            target: "x86_64-apple-darwin"
            arch: "x86_64"
            name: "Intel"
            platform: "macos"
          # Linux builds
          - os: ubuntu-latest
            target: "x86_64-unknown-linux-gnu"
            arch: "x86_64"
            name: "Linux x64"
            platform: "linux"
          # Windows builds
          - os: windows-latest
            target: "x86_64-pc-windows-msvc"
            arch: "x86_64"
            name: "Windows x64"
            platform: "windows"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.x

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './dui/src-tauri -> target'

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            wget \
            file \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libjavascriptcoregtk-4.1-dev \
            libsoup-3.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install Windows dependencies
        if: matrix.platform == 'windows'
        run: |
          # Install WiX Toolset
          $wixUrl = "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip"
          $wixZip = "$env:TEMP\wix.zip"
          Invoke-WebRequest -Uri $wixUrl -OutFile $wixZip
          Expand-Archive -Path $wixZip -DestinationPath "$env:TEMP\wix" -Force
          echo "$env:TEMP\wix" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install frontend dependencies
        run: |
          cd dui
          deno task build

      - name: Build DUI (Tauri)
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: './dui'
          args: --target ${{ matrix.target }}

      # Process and upload build artifacts
      - name: Process build artifacts
        shell: bash
        run: |
          BUNDLE_DIR="dui/src-tauri/target/${{ matrix.target }}/release/bundle"
          echo "Build output directory contents:"
          ls -R "$BUNDLE_DIR" || echo "No bundle directory found"

          # Create staging directory
          mkdir -p staging

          # Copy artifacts based on platform
          if [[ "${{ matrix.platform }}" == "macos" ]]; then
            echo "Processing macOS artifacts..."
            if [ -d "$BUNDLE_DIR/dmg" ]; then
              cp -v "$BUNDLE_DIR"/dmg/*.dmg staging/ || echo "No DMG files found"
            fi
            if [ -d "$BUNDLE_DIR/macos" ]; then
              cp -rv "$BUNDLE_DIR"/macos/*.app staging/ || echo "No APP files found"
            fi
          elif [[ "${{ matrix.platform }}" == "linux" ]]; then
            echo "Processing Linux artifacts..."
            if [ -d "$BUNDLE_DIR/appimage" ]; then
              cp -v "$BUNDLE_DIR"/appimage/*.AppImage staging/ || echo "No AppImage files found"
            fi
          elif [[ "${{ matrix.platform }}" == "windows" ]]; then
            echo "Processing Windows artifacts..."
            if [ -d "$BUNDLE_DIR/msi" ]; then
              cp -v "$BUNDLE_DIR"/msi/*.msi staging/ || echo "No MSI files found"
            fi
            if [ -d "$BUNDLE_DIR/nsis" ]; then
              cp -v "$BUNDLE_DIR"/nsis/*.exe staging/ || echo "No NSIS files found"
            fi
          fi

          echo "\nStaging directory contents:"
          ls -la staging/

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dui-${{ matrix.platform }}-${{ matrix.arch }}
          path: staging/*

  release:
    needs: [build-binaries, build-dui]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@61fe2df320078202e33d7d5ad347e7dcfa0e8f31  # v1.1.2
        with:
          deno-version: v2.x

      - name: Get version
        id: get_version
        run: echo "VERSION=$(deno eval 'import { VERSION } from "./version.ts"; console.log(VERSION);')" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: List downloaded artifacts
        run: |
          echo "Current directory: $PWD"
          echo "Directory contents:"
          ls -la
          echo "\nFull directory tree:"
          tree .
          echo "\nDetailed file listing:"
          find . -type f -ls
          echo "\nSearching for specific file types:"
          echo "DMG files:" && find . -name "*.dmg"
          echo "APP bundles:" && find . -name "*.app"
          echo "AppImage files:" && find . -name "*.AppImage"
          echo "MSI files:" && find . -name "*.msi"
          echo "EXE files:" && find . -name "*.exe"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          release_name: Release v${{ steps.get_version.outputs.VERSION }}
          body: |
            Beyond Better v${{ steps.get_version.outputs.VERSION }}

            Installation Instructions:

            1. Download the appropriate installer for your system:

               Windows:
               - MSI installer (recommended): Download the .msi file
               - EXE installer: Download the -setup.exe file
               - Run the installer and follow the prompts

               macOS:
               - Apple Silicon (M1/M2): Download the apple-silicon.dmg
               - Intel: Download the intel.dmg
               - Open the .dmg file
               - Drag the Beyond Better app to your Applications folder
               - When first launching, you'll need to:
                 * Right-click the app and select Open, or
                 * Go to System Settings > Privacy & Security and click 'Open Anyway'
               - This is only needed once, as the app is currently unsigned

               Linux:
               - Download the .AppImage file
               - Make it executable: chmod +x BB-dui-*.AppImage
               - Run the AppImage

            2. Binary Installation:
               - The DUI will automatically download and install the appropriate BB binaries on first run
               - For manual installation, download the appropriate binary archive for your system

            Note: On Windows, you may need to approve SmartScreen security prompts during first run.

            Changes in this Release:
            ${{ github.event.pull_request && github.event.pull_request.body || inputs.version && format('Version {0} release', inputs.version) || 'No release notes provided.' }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          # Debug: Show downloaded artifacts
          echo "Current directory contents:"
          ls -la
          find . -type f -ls

          # Function to handle upload with retry
          upload_asset() {
            local file="$1"
            local attempt=1
            local max_attempts=3
            
            while [ $attempt -le $max_attempts ]; do
              echo "Uploading $file (attempt $attempt of $max_attempts)"
              if gh release upload "v${{ steps.get_version.outputs.VERSION }}" "$file"; then
                return 0
              fi
              attempt=$((attempt + 1))
              if [ $attempt -le $max_attempts ]; then
                echo "Retrying in 5 seconds..."
                sleep 5
              fi
            done
            
            echo "::error::Failed to upload $file after $max_attempts attempts"
            return 1
          }

          # Upload binary artifacts
          for target in x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu x86_64-pc-windows-msvc x86_64-apple-darwin aarch64-apple-darwin; do
            echo "Processing binary target: $target"
            cd "bb-$target"
            
            if [ "$target" = "x86_64-pc-windows-msvc" ]; then
              zip -r "../bb-$target-v${{ steps.get_version.outputs.VERSION }}.zip" .
            else
              zip -r "../bb-$target-v${{ steps.get_version.outputs.VERSION }}.zip" .
              tar czf "../bb-$target-v${{ steps.get_version.outputs.VERSION }}.tar.gz" .
            fi
            cd ..
            
            upload_asset "bb-$target-v${{ steps.get_version.outputs.VERSION }}.zip"
            if [ "$target" != "x86_64-pc-windows-msvc" ]; then
              upload_asset "bb-$target-v${{ steps.get_version.outputs.VERSION }}.tar.gz"
            fi
          done

          # Upload DUI artifacts
          for platform_arch in "macos-x86_64" "macos-aarch64" "linux-x86_64" "windows-x86_64"; do
            echo "Processing DUI platform/arch: $platform_arch"
            platform="${platform_arch%%-*}"
            arch="${platform_arch#*-}"
            
            echo "Checking for DUI artifacts:"
            ls -la "dui-${platform}-${arch}" || true
            
            case "$platform_arch" in
              "macos-x86_64") 
                platform_name="macos"
                arch_name="intel" ;;
              "macos-aarch64")
                platform_name="macos"
                arch_name="apple-silicon" ;;
              "linux-x86_64")
                platform_name="linux"
                arch_name="x64" ;;
              "windows-x86_64")
                platform_name="windows"
                arch_name="x64" ;;
            esac
            
            case "$platform_arch" in
              "macos-x86_64") 
                platform_name="macos"
                arch_name="intel" ;;
              "macos-aarch64")
                platform_name="macos"
                arch_name="apple-silicon" ;;
              "linux-x86_64")
                platform_name="linux"
                arch_name="x64" ;;
              "windows-x86_64")
                platform_name="windows"
                arch_name="x64" ;;
            esac

            if [ "$platform" = "macos" ]; then
              # Upload DMG files
              echo "Processing DMG files:"
              for f in "dui-${platform}-${arch}"/*.dmg; do
                if [ -f "$f" ]; then
                  echo "Found DMG file: $f"
                  new_name="BB-dui-${{ steps.get_version.outputs.VERSION }}-$platform_name-$arch_name.dmg"
                  echo "Creating renamed copy: $new_name"
                  cp "$f" "$new_name"
                  echo "Attempting upload of $new_name"
                  upload_asset "$new_name"
                fi
              done
              
              # Create and upload app archive
              echo "Processing .app bundles:"
              for app in "dui-${platform}-${arch}"/*.app; do
                if [ -d "$app" ]; then
                  echo "Found app bundle: $app"
                  new_name="BB-dui-${{ steps.get_version.outputs.VERSION }}-$platform_name-$arch_name.app.tar.gz"
                  echo "Creating archive: $new_name"
                  tar -czf "$new_name" "$app"
                  echo "Attempting upload of $new_name"
                  upload_asset "$new_name"
                fi
              done
            elif [ "$platform" = "linux" ]; then
              # Upload AppImage files
              echo "Processing AppImage files:"
              for f in "dui-${platform}-${arch}"/*.AppImage; do
                if [ -f "$f" ]; then
                  echo "Found AppImage file: $f"
                  new_name="BB-dui-${{ steps.get_version.outputs.VERSION }}-$platform_name-$arch_name.AppImage"
                  echo "Creating renamed copy: $new_name"
                  cp "$f" "$new_name"
                  echo "Attempting upload of $new_name"
                  upload_asset "$new_name"
                fi
              done
            elif [ "$platform" = "windows" ]; then
              # Upload MSI files
              echo "Processing MSI files:"
              for f in "dui-${platform}-${arch}"/*.msi; do
                if [ -f "$f" ]; then
                  echo "Found MSI file: $f"
                  new_name="BB-dui-${{ steps.get_version.outputs.VERSION }}-$platform_name-$arch_name.msi"
                  echo "Creating renamed copy: $new_name"
                  cp "$f" "$new_name"
                  echo "Attempting upload of $new_name"
                  upload_asset "$new_name"
                fi
              done
              
              # Upload NSIS installer
              echo "Processing NSIS files:"
              for f in "dui-${platform}-${arch}"/*.exe; do
                if [[ "$f" == *"-setup.exe" ]]; then
                  echo "Found NSIS file: $f"
                  new_name="BB-dui-${{ steps.get_version.outputs.VERSION }}-$platform_name-$arch_name-setup.exe"
                  echo "Creating renamed copy: $new_name"
                  cp "$f" "$new_name"
                  echo "Attempting upload of $new_name"
                  upload_asset "$new_name"
                fi
              done
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
