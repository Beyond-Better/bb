/* esm.sh - esbuild bundle(openai@4.67.2/error) denonext production */
import{castToError as $}from"/v135/openai@4.67.2/denonext/core.js";var o=class extends Error{},r=class s extends o{constructor(e,n,c,t){super(`${s.makeMessage(e,n,c)}`),this.status=e,this.headers=t,this.request_id=t?.["x-request-id"];let u=n;this.error=u,this.code=u?.code,this.param=u?.param,this.type=u?.type}static makeMessage(e,n,c){let t=n?.message?typeof n.message=="string"?n.message:JSON.stringify(n.message):n?JSON.stringify(n):c;return e&&t?`${e} ${t}`:e?`${e} status code (no body)`:t||"(no status code or body)"}static generate(e,n,c,t){if(!e)return new i({message:c,cause:$(n)});let u=n?.error;return e===400?new d(e,u,c,t):e===401?new p(e,u,c,t):e===403?new x(e,u,c,t):e===404?new f(e,u,c,t):e===409?new a(e,u,c,t):e===422?new l(e,u,c,t):e===429?new w(e,u,c,t):e>=500?new g(e,u,c,t):new s(e,u,c,t)}},h=class extends r{constructor({message:e}={}){super(void 0,void 0,e||"Request was aborted.",void 0),this.status=void 0}},i=class extends r{constructor({message:e,cause:n}){super(void 0,void 0,e||"Connection error.",void 0),this.status=void 0,n&&(this.cause=n)}},m=class extends i{constructor({message:e}={}){super({message:e??"Request timed out."})}},d=class extends r{constructor(){super(...arguments),this.status=400}},p=class extends r{constructor(){super(...arguments),this.status=401}},x=class extends r{constructor(){super(...arguments),this.status=403}},f=class extends r{constructor(){super(...arguments),this.status=404}},a=class extends r{constructor(){super(...arguments),this.status=409}},l=class extends r{constructor(){super(...arguments),this.status=422}},w=class extends r{constructor(){super(...arguments),this.status=429}},g=class extends r{},y=class extends o{constructor(){super("Could not parse response content as the length limit was reached")}},q=class extends o{constructor(){super("Could not parse response content as the request was rejected by the content filter")}};export{i as APIConnectionError,m as APIConnectionTimeoutError,r as APIError,h as APIUserAbortError,p as AuthenticationError,d as BadRequestError,a as ConflictError,q as ContentFilterFinishReasonError,g as InternalServerError,y as LengthFinishReasonError,f as NotFoundError,o as OpenAIError,x as PermissionDeniedError,w as RateLimitError,l as UnprocessableEntityError};
//# sourceMappingURL=error.js.map