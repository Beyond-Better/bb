/* esm.sh - esbuild bundle(openai@4.67.2/internal/decoders/line) denonext production */
import { Buffer as __Buffer$ } from "node:buffer";
import{OpenAIError as f}from"/v135/openai@4.67.2/denonext/error.js";var i=class o{constructor(){this.buffer=[],this.trailingCR=!1}decode(e){let r=this.decodeText(e);if(this.trailingCR&&(r="\r"+r,this.trailingCR=!1),r.endsWith("\r")&&(this.trailingCR=!0,r=r.slice(0,-1)),!r)return[];let n=o.NEWLINE_CHARS.has(r[r.length-1]||""),t=r.split(o.NEWLINE_REGEXP);return n&&t.pop(),t.length===1&&!n?(this.buffer.push(t[0]),[]):(this.buffer.length>0&&(t=[this.buffer.join("")+t[0],...t.slice(1)],this.buffer=[]),n||(this.buffer=[t.pop()||""]),t)}decodeText(e){if(e==null)return"";if(typeof e=="string")return e;if(typeof __Buffer$<"u"){if(e instanceof __Buffer$)return e.toString();if(e instanceof Uint8Array)return __Buffer$.from(e).toString();throw new f(`Unexpected: received non-Uint8Array (${e.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`)}if(typeof TextDecoder<"u"){if(e instanceof Uint8Array||e instanceof ArrayBuffer)return this.textDecoder??(this.textDecoder=new TextDecoder("utf8")),this.textDecoder.decode(e);throw new f(`Unexpected: received non-Uint8Array/ArrayBuffer (${e.constructor.name}) in a web platform. Please report this error.`)}throw new f("Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.")}flush(){if(!this.buffer.length&&!this.trailingCR)return[];let e=[this.buffer.join("")];return this.buffer=[],this.trailingCR=!1,e}};i.NEWLINE_CHARS=new Set([`
`,"\r"]);i.NEWLINE_REGEXP=/\r\n|[\n\r]/g;export{i as LineDecoder};
//# sourceMappingURL=line.js.map