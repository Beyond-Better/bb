/* esm.sh - esbuild bundle(openai@4.67.2/uploads) denonext production */
import { Buffer as __Buffer$ } from "node:buffer";
import{FormData as u,File as c,getMultipartRequestOptions as y,isFsReadStream as g}from"/v135/openai@4.67.2/denonext/_shims.js";import{fileFromPath as M}from"/v135/openai@4.67.2/denonext/_shims.js";var a=t=>t!=null&&typeof t=="object"&&typeof t.url=="string"&&typeof t.blob=="function",b=t=>t!=null&&typeof t=="object"&&typeof t.name=="string"&&typeof t.lastModified=="number"&&p(t),p=t=>t!=null&&typeof t=="object"&&typeof t.size=="number"&&typeof t.type=="string"&&typeof t.text=="function"&&typeof t.slice=="function"&&typeof t.arrayBuffer=="function",m=t=>b(t)||a(t)||g(t);async function l(t,r,o){if(t=await t,b(t))return t;if(a(t)){let e=await t.blob();r||(r=new URL(t.url).pathname.split(/[\\/]/).pop()??"unknown_file");let d=p(e)?[await e.arrayBuffer()]:[e];return new c(d,r,o)}let n=await F(t);if(r||(r=h(t)??"unknown_file"),!o?.type){let e=n[0]?.type;typeof e=="string"&&(o={...o,type:e})}return new c(n,r,o)}async function F(t){let r=[];if(typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer)r.push(t);else if(p(t))r.push(await t.arrayBuffer());else if(j(t))for await(let o of t)r.push(o);else throw new Error(`Unexpected data type: ${typeof t}; constructor: ${t?.constructor?.name}; props: ${B(t)}`);return r}function B(t){return`[${Object.getOwnPropertyNames(t).map(o=>`"${o}"`).join(", ")}]`}function h(t){return i(t.name)||i(t.filename)||i(t.path)?.split(/[\\/]/).pop()}var i=t=>{if(typeof t=="string")return t;if(typeof __Buffer$<"u"&&t instanceof __Buffer$)return String(t)},j=t=>t!=null&&typeof t=="object"&&typeof t[Symbol.asyncIterator]=="function",$=t=>t&&typeof t=="object"&&t.body&&t[Symbol.toStringTag]==="MultipartBody",A=async t=>{if(!s(t.body))return t;let r=await w(t.body);return y(r,t)},O=async t=>{let r=await w(t.body);return y(r,t)},w=async t=>{let r=new u;return await Promise.all(Object.entries(t||{}).map(([o,n])=>f(r,o,n))),r},s=t=>{if(m(t))return!0;if(Array.isArray(t))return t.some(s);if(t&&typeof t=="object"){for(let r in t)if(s(t[r]))return!0}return!1},f=async(t,r,o)=>{if(o!==void 0){if(o==null)throw new TypeError(`Received null for "${r}"; to pass null in FormData, you must use the string 'null'`);if(typeof o=="string"||typeof o=="number"||typeof o=="boolean")t.append(r,String(o));else if(m(o)){let n=await l(o);t.append(r,n)}else if(Array.isArray(o))await Promise.all(o.map(n=>f(t,r+"[]",n)));else if(typeof o=="object")await Promise.all(Object.entries(o).map(([n,e])=>f(t,`${r}[${n}]`,e)));else throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${o} instead`)}};export{w as createForm,M as fileFromPath,p as isBlobLike,b as isFileLike,$ as isMultipartBody,a as isResponseLike,m as isUploadable,A as maybeMultipartFormRequestOptions,O as multipartFormRequestOptions,l as toFile};
//# sourceMappingURL=uploads.js.map