{
	"id": "example_validation_rules",
	"name": "Example Validation Rules",
	"description": "Example validation rules demonstrating the framework capabilities",
	"version": "1.0.0",
	"context": "chat_input",
	"rules": [
		{
			"id": "claude_extended_thinking_temp",
			"name": "Claude Extended Thinking Temperature",
			"description": "When Claude Opus or Sonnet models have extended thinking enabled, temperature must be 1.0",
			"trigger": "on_change",
			"priority": 100,
			"condition": {
				"logic": "AND",
				"conditions": [
					{
						"field": "model",
						"operator": "matches_pattern",
						"value": "claude.*(?:opus|sonnet)",
						"description": "Model is Claude Opus or Sonnet"
					},
					{
						"field": "parameters.extendedThinking.enabled",
						"operator": "equals",
						"value": true,
						"description": "Extended thinking is enabled"
					}
				]
			},
			"actions": [
				{
					"action": "set_value",
					"target": "temperature",
					"value": 1.0,
					"message": "Temperature automatically set to 1.0 for Claude models with extended thinking",
					"severity": "info"
				},
				{
					"action": "set_constraint",
					"target": "temperature",
					"value": {
						"min": 1.0,
						"max": 1.0
					}
				}
			],
			"enabled": true,
			"tags": ["claude", "extended_thinking", "temperature"]
		},
		{
			"id": "vision_without_images",
			"name": "Vision Model Without Images",
			"description": "Warn when vision models are used without image attachments",
			"trigger": "on_submit",
			"priority": 50,
			"condition": {
				"logic": "AND",
				"conditions": [
					{
						"field": "modelCapabilities.supportedFeatures.vision",
						"operator": "equals",
						"value": true,
						"description": "Model supports vision"
					},
					{
						"field": "parameters.attachedFiles.length",
						"operator": "equals",
						"value": 0,
						"description": "No files attached"
					}
				]
			},
			"actions": [
				{
					"action": "show_warning",
					"target": "attachedFiles",
					"message": "This model supports vision capabilities. Consider attaching images for better results.",
					"severity": "warning"
				}
			],
			"enabled": true,
			"tags": ["vision", "attachments"]
		},
		{
			"id": "complex_conditional_example",
			"name": "Complex Conditional Example",
			"description": "Complex rule with nested conditions for demonstration",
			"trigger": "on_change",
			"priority": 75,
			"condition": {
				"logic": "OR",
				"conditions": [
					{
						"logic": "AND",
						"conditions": [
							{
								"field": "model",
								"operator": "contains",
								"value": "gpt-4"
							},
							{
								"field": "parameters.temperature",
								"operator": "greater_than",
								"value": 0.8
							}
						]
					},
					{
						"logic": "AND",
						"conditions": [
							{
								"field": "model",
								"operator": "contains",
								"value": "claude"
							},
							{
								"field": "parameters.maxTokens",
								"operator": "greater_than",
								"value": 16000
							}
						]
					}
				]
			},
			"actions": [
				{
					"action": "show_warning",
					"target": "parameters",
					"message": "High resource usage detected. Consider optimizing parameters for better performance.",
					"severity": "warning"
				}
			],
			"enabled": true,
			"tags": ["performance", "optimization"]
		},
		{
			"id": "prompt_caching_disabled",
			"name": "Prompt Caching Feature Check",
			"description": "Disable prompt caching for models that don't support it",
			"trigger": "on_load",
			"priority": 80,
			"condition": {
				"field": "modelCapabilities.supportedFeatures.promptCaching",
				"operator": "equals",
				"value": false,
				"description": "Model does not support prompt caching"
			},
			"actions": [
				{
					"action": "disable_feature",
					"target": "usePromptCaching",
					"message": "Prompt caching is not supported by this model"
				},
				{
					"action": "set_value",
					"target": "usePromptCaching",
					"value": false
				}
			],
			"enabled": true,
			"tags": ["promptCaching", "features"]
		},
		{
			"id": "function_calling_models",
			"name": "Function Calling Models Recommendation",
			"description": "Recommend JSON format for function calling models",
			"trigger": "on_change",
			"priority": 60,
			"condition": {
				"logic": "AND",
				"conditions": [
					{
						"field": "modelCapabilities.supportedFeatures.functionCalling",
						"operator": "equals",
						"value": true
					},
					{
						"field": "parameters.responseFormat",
						"operator": "not_equals",
						"value": "json"
					}
				]
			},
			"actions": [
				{
					"action": "suggest_value",
					"target": "responseFormat",
					"value": "json",
					"message": "JSON response format is recommended for function calling models"
				}
			],
			"enabled": true,
			"tags": ["functionCalling", "responseFormat"]
		}
	],
	"metadata": {
		"createdAt": "2025-06-24T13:44:00.000Z",
		"updatedAt": "2025-06-24T13:44:00.000Z",
		"author": "system"
	}
}
