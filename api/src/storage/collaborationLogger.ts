import { join } from '@std/path';
import { ensureDir } from '@std/fs';
import type { JSX } from 'preact';
import { renderToString } from 'preact-render-to-string';

import LogEntryFormatterManager from '../logEntries/logEntryFormatterManager.ts';
import type ProjectEditor from 'api/editor/projectEditor.ts';
//import CollaborationLogFormatter from 'cli/collaborationLogFormatter.ts';
import type { InteractionId, CollaborationLogDataEntry, InteractionStats, TokenUsageStats } from 'shared/types.ts';
import type { AuxiliaryChatContent } from 'api/logEntries/types.ts';
import type { LLMModelConfig } from 'api/types/llms.ts';
import { getProjectAdminDataDir } from 'shared/projectPath.ts';
import { logger } from 'shared/logger.ts';
import { getConfigManager } from 'shared/config/configManager.ts';
//import { ThinkingExtractor } from '../utils/thinkingExtractor.ts';
import type {
	LLMToolFormatterDestination,
	LLMToolInputSchema,
	LLMToolRunBbResponse,
	LLMToolRunResultContent,
} from 'api/llms/llmTool.ts';

export type CollaborationLogEntryType =
	| 'user'
	| 'orchestrator' // user role, but prompt generated by LLM
	| 'assistant'
	| 'tool_use'
	| 'tool_result'
	| 'answer'
	| 'auxiliary'
	| 'error'; //text_change

export interface CollaborationLogEntryContentToolResult {
	toolResult: LLMToolRunResultContent;
	bbResponse: LLMToolRunBbResponse;
}

export type CollaborationLogEntryContent =
	| string
	| AuxiliaryChatContent
	| LLMToolInputSchema
	| CollaborationLogEntryContentToolResult;

export interface CollaborationLogEntry {
	entryType: CollaborationLogEntryType;
	content: CollaborationLogEntryContent;
	thinking?: string;
	toolName?: string;
}

const configManager = await getConfigManager();
const globalConfig = await configManager.getGlobalConfig();

export default class CollaborationLogger {
	private logFileRaw!: string;
	private logFileJson!: string;
	private collaborationLogsDir!: string;
	private ensuredDir: boolean = false;
	private static readonly ENTRY_SEPARATOR = '<<<BB_LOG_ENTRY_SEPARATOR>>>';
	private static readonly entryTypeLabels: Record<
		CollaborationLogEntryType,
		string
	> = {
		user: globalConfig.myPersonsName || 'Person',
		orchestrator: `${globalConfig.myAssistantsName || 'Assistant'} as Orchestrator`,
		assistant: globalConfig.myAssistantsName || 'Assistant',
		answer: `Answer from ${globalConfig.myAssistantsName || 'Assistant'}`,
		tool_use: 'Tool Input',
		tool_result: 'Tool Output',
		auxiliary: 'Auxiliary Chat',
		error: 'Error',
	};
	private logEntryFormatterManager!: LogEntryFormatterManager;
	private projectId: string;

	constructor(
		private projectEditor: ProjectEditor,
		private conversationId: InteractionId,
		private logEntryHandler: (
			messageId: string,
			parentMessageId: string | null,
			conversationId: InteractionId,
			agentInteractionId: InteractionId | null,
			timestamp: string,
			logEntry: CollaborationLogEntry,
			interactionStats: InteractionStats,
			tokenUsageStats: TokenUsageStats,
			modelConfig?: LLMModelConfig,
		) => Promise<void>,
	) {
		this.projectId = projectEditor.projectId;
	}

	async init(): Promise<CollaborationLogger> {
		this.logEntryFormatterManager = await new LogEntryFormatterManager(this.projectEditor).init();

		this.collaborationLogsDir = await CollaborationLogger.getLogFileDirPath(this.projectId, this.conversationId);

		this.logFileRaw = await CollaborationLogger.getLogFileRawPath(this.projectId, this.conversationId);
		this.logFileJson = await CollaborationLogger.getLogFileJsonPath(this.projectId, this.conversationId);

		CollaborationLogger.entryTypeLabels.user = globalConfig.myPersonsName || 'Person';
		CollaborationLogger.entryTypeLabels.assistant = globalConfig.myAssistantsName || 'Assistant';

		return this;
	}

	async ensureCollaborationLogsDir(): Promise<void> {
		if (this.ensuredDir) return;
		await ensureDir(this.collaborationLogsDir);
		this.ensuredDir = true;
	}
	static async getLogFileDirPath(projectId: string, conversationId: string): Promise<string> {
		const projectAdminDir = await getProjectAdminDataDir(projectId);
		const collaborationLogsDir = join(projectAdminDir, 'conversations', conversationId);
		//await ensureDir(collaborationLogsDir);
		return collaborationLogsDir;
	}
	static async getLogFileRawPath(projectId: string, conversationId: string): Promise<string> {
		const collaborationLogsDir = await CollaborationLogger.getLogFileDirPath(projectId, conversationId);
		return join(collaborationLogsDir, 'conversation.log');
	}
	static async getLogFileJsonPath(projectId: string, conversationId: string): Promise<string> {
		const collaborationLogsDir = await CollaborationLogger.getLogFileDirPath(projectId, conversationId);
		return join(collaborationLogsDir, 'conversation.jsonl');
	}

	static async getLogDataEntries(
		projectId: string,
		conversationId: string,
	): Promise<Array<CollaborationLogDataEntry>> {
		const collaborationLogFile = await CollaborationLogger.getLogFileJsonPath(projectId, conversationId);
		const content = await Deno.readTextFile(collaborationLogFile);
		return content.trim().split('\n').map((line) => JSON.parse(line));
	}

	private async appendToRawLog(content: string) {
		await this.ensureCollaborationLogsDir();
		await Deno.writeTextFile(this.logFileRaw, content + '\n', { append: true });
	}
	private async appendToJsonLog(content: string) {
		await this.ensureCollaborationLogsDir();
		await Deno.writeTextFile(this.logFileJson, content + '\n', { append: true });
	}

	private getTimestamp(): string {
		return new Date().toISOString();
	}

	private async logEntry(
		messageId: string,
		parentMessageId: string | null,
		agentInteractionId: InteractionId | null,
		logEntry: CollaborationLogEntry,
		interactionStats: InteractionStats = { statementCount: 0, statementTurnCount: 0, interactionTurnCount: 0 },
		tokenUsageStats: TokenUsageStats = {
			tokenUsageTurn: {
				inputTokens: 0,
				outputTokens: 0,
				totalTokens: 0,
				thoughtTokens: 0,
				totalAllTokens: 0,
			},
			tokenUsageStatement: {
				inputTokens: 0,
				outputTokens: 0,
				totalTokens: 0,
				thoughtTokens: 0,
				totalAllTokens: 0,
			},
			tokenUsageInteraction: {
				inputTokens: 0,
				outputTokens: 0,
				totalTokens: 0,
				thoughtTokens: 0,
				totalAllTokens: 0,
			},
		},
		modelConfig?: LLMModelConfig,
	) {
		const timestamp = this.getTimestamp();

		// logEntryHandler handles emitting events for cli and bui
		try {
			await this.logEntryHandler(
				messageId,
				parentMessageId,
				this.conversationId,
				agentInteractionId,
				timestamp,
				logEntry,
				interactionStats,
				tokenUsageStats,
				modelConfig,
			);
		} catch (error) {
			logger.error('Error in logEntryHandler:', error);
		}

		const rawEntry = await this.createRawEntryWithSeparator(
			parentMessageId,
			agentInteractionId,
			timestamp,
			logEntry,
			interactionStats,
			tokenUsageStats,
			modelConfig,
		);
		try {
			await this.appendToRawLog(rawEntry);
		} catch (error) {
			logger.error('Error appending to raw log:', error);
		}

		const jsonEntry = JSON.stringify({
			messageId,
			parentMessageId,
			agentInteractionId,
			timestamp,
			logEntry,
			interactionStats,
			tokenUsageStats,
			modelConfig,
		});
		try {
			await this.appendToJsonLog(jsonEntry);
		} catch (error) {
			logger.error('Error appending to json log:', error as Error);
		}
	}

	async logUserMessage(
		messageId: string,
		message: string,
		interactionStats: InteractionStats,
	) {
		await this.logEntry(messageId, null, null, { entryType: 'user', content: message }, interactionStats);
	}

	async logOrchestratorMessage(
		messageId: string,
		parentMessageId: string | null,
		agentInteractionId: string | null,
		message: string,
		interactionStats: InteractionStats,
	) {
		await this.logEntry(
			messageId,
			parentMessageId,
			agentInteractionId,
			{ entryType: 'orchestrator', content: message },
			interactionStats,
		);
	}

	async logAssistantMessage(
		messageId: string,
		parentMessageId: string | null,
		agentInteractionId: string | null,
		message: string,
		thinking: string,
		interactionStats: InteractionStats,
		tokenUsageStats: TokenUsageStats,
		modelConfig?: LLMModelConfig,
	) {
		await this.logEntry(
			messageId,
			parentMessageId,
			agentInteractionId,
			{
				entryType: 'assistant',
				content: message,
				thinking: thinking,
			},
			interactionStats,
			tokenUsageStats,
			modelConfig,
		);
	}

	async logAnswerMessage(
		messageId: string,
		parentMessageId: string | null,
		agentInteractionId: string | null,
		answer: string,
		assistantThinking: string,
		interactionStats: InteractionStats,
		tokenUsageStats: TokenUsageStats,
		modelConfig?: LLMModelConfig,
	) {
		await this.logEntry(
			messageId,
			parentMessageId,
			agentInteractionId,
			{
				entryType: 'answer',
				content: answer,
				thinking: assistantThinking,
			},
			interactionStats,
			tokenUsageStats,
			modelConfig,
		);
	}

	async logAuxiliaryMessage(
		messageId: string,
		parentMessageId: string | null,
		agentInteractionId: string | null,
		message: string | AuxiliaryChatContent,
		interactionStats?: InteractionStats,
		tokenUsageStats?: TokenUsageStats,
		modelConfig?: LLMModelConfig,
	) {
		await this.logEntry(
			messageId,
			parentMessageId,
			agentInteractionId,
			{ entryType: 'auxiliary', content: message },
			interactionStats,
			tokenUsageStats,
			modelConfig,
		);
	}

	async logToolUse(
		messageId: string,
		parentMessageId: string | null,
		agentInteractionId: string | null,
		toolName: string,
		toolInput: LLMToolInputSchema,
		interactionStats: InteractionStats,
		tokenUsageStats: TokenUsageStats,
		modelConfig?: LLMModelConfig,
	) {
		try {
			await this.logEntry(
				messageId,
				parentMessageId,
				agentInteractionId,
				{ entryType: 'tool_use', content: toolInput, toolName },
				interactionStats,
				tokenUsageStats,
				modelConfig,
			);
		} catch (error) {
			logger.error('Error in logEntry for logToolUse:', error);
		}
	}

	async logToolResult(
		messageId: string,
		parentMessageId: string | null,
		agentInteractionId: string | null,
		toolName: string,
		toolResult: LLMToolRunResultContent,
		bbResponse: LLMToolRunBbResponse,
	) {
		try {
			await this.logEntry(messageId, parentMessageId, agentInteractionId, {
				entryType: 'tool_result',
				content: { toolResult, bbResponse },
				toolName,
			});
		} catch (error) {
			logger.error('Error in logEntry for logToolResult:', error);
		}
	}

	async logError(
		messageId: string,
		parentMessageId: string | null,
		agentInteractionId: string | null,
		error: string,
	) {
		await this.logEntry(messageId, parentMessageId, agentInteractionId, { entryType: 'error', content: error });
	}

	//async logTextChange(filePath: string, change: string) {
	//	const message = `Diff Patch for ${filePath}:\n${change}`;
	//	await this.logEntry('text_change', message);
	//}

	async createRawEntry(
		parentMessageId: string | null,
		agentInteractionId: string | null,
		timestamp: string,
		logEntry: CollaborationLogEntry,
		_conversationStats: InteractionStats,
		_tokenUsageStats: TokenUsageStats,
		_modelConfig?: LLMModelConfig,
	): Promise<string> {
		// [TODO] add token usage to header line
		const formattedContent = await this.logEntryFormatterManager.formatLogEntry(
			'console' as LLMToolFormatterDestination, // [TODO] we need a 'file' destination, use 'console' with ansi stripped
			logEntry,
			{}, // options
		);

		// Convert JSX to HTML string if necessary
		const rawEntryContent = typeof formattedContent === 'string'
			? formattedContent
			: renderToString(formattedContent.content as JSX.Element);

		const label = CollaborationLogger.entryTypeLabels[logEntry.entryType] || 'Unknown';
		return `## ${label} [${timestamp}] [AgentId: ${agentInteractionId || '--'}][Parent MessageId:${
			parentMessageId || '--'
		}]\n${rawEntryContent.trim()}`;
	}

	async createRawEntryWithSeparator(
		parentMessageId: string | null,
		agentInteractionId: string | null,
		timestamp: string,
		logEntry: CollaborationLogEntry,
		interactionStats: InteractionStats,
		tokenUsageStats: TokenUsageStats,
		modelConfig?: LLMModelConfig,
	): Promise<string> {
		let rawEntry = await this.createRawEntry(
			parentMessageId,
			agentInteractionId,
			timestamp,
			logEntry,
			interactionStats,
			tokenUsageStats,
			modelConfig,
		);
		// Ensure entry ends with a single newline and the separator
		rawEntry = rawEntry.trimEnd() + '\n' + CollaborationLogger.getEntrySeparator() + '\n';
		return rawEntry;
	}

	static getEntrySeparator(): string {
		return this.ENTRY_SEPARATOR.trim();
	}
}
