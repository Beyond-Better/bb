/* esm.sh - esbuild bundle(openai@4.67.2/streaming) denonext production */
import{ReadableStream as y}from"/v135/openai@4.67.2/denonext/_shims.js";import{OpenAIError as m}from"/v135/openai@4.67.2/denonext/error.js";import{LineDecoder as u}from"/v135/openai@4.67.2/denonext/internal/decoders/line.js";import{APIError as d}from"/v135/openai@4.67.2/denonext/error.js";var f=class r{constructor(e,t){this.iterator=e,this.controller=t}static fromSSEResponse(e,t){let n=!1;async function*i(){if(n)throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");n=!0;let a=!1;try{for await(let o of g(e,t))if(!a){if(o.data.startsWith("[DONE]")){a=!0;continue}if(o.event===null){let s;try{s=JSON.parse(o.data)}catch(c){throw console.error("Could not parse message into JSON:",o.data),console.error("From chunk:",o.raw),c}if(s&&s.error)throw new d(void 0,s.error,void 0,void 0);yield s}else{let s;try{s=JSON.parse(o.data)}catch(c){throw console.error("Could not parse message into JSON:",o.data),console.error("From chunk:",o.raw),c}if(o.event=="error")throw new d(void 0,s.error,s.message,void 0);yield{event:o.event,data:s}}}a=!0}catch(o){if(o instanceof Error&&o.name==="AbortError")return;throw o}finally{a||t.abort()}}return new r(i,t)}static fromReadableStream(e,t){let n=!1;async function*i(){let o=new u,s=h(e);for await(let c of s)for(let w of o.decode(c))yield w;for(let c of o.flush())yield c}async function*a(){if(n)throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");n=!0;let o=!1;try{for await(let s of i())o||s&&(yield JSON.parse(s));o=!0}catch(s){if(s instanceof Error&&s.name==="AbortError")return;throw s}finally{o||t.abort()}}return new r(a,t)}[Symbol.asyncIterator](){return this.iterator()}tee(){let e=[],t=[],n=this.iterator(),i=a=>({next:()=>{if(a.length===0){let o=n.next();e.push(o),t.push(o)}return a.shift()}});return[new r(()=>i(e),this.controller),new r(()=>i(t),this.controller)]}toReadableStream(){let e=this,t,n=new TextEncoder;return new y({async start(){t=e[Symbol.asyncIterator]()},async pull(i){try{let{value:a,done:o}=await t.next();if(o)return i.close();let s=n.encode(JSON.stringify(a)+`
`);i.enqueue(s)}catch(a){i.error(a)}},async cancel(){await t.return?.()}})}};async function*g(r,e){if(!r.body)throw e.abort(),new m("Attempted to iterate over a response with no body");let t=new l,n=new u,i=h(r.body);for await(let a of p(i))for(let o of n.decode(a)){let s=t.decode(o);s&&(yield s)}for(let a of n.flush()){let o=t.decode(a);o&&(yield o)}}async function*p(r){let e=new Uint8Array;for await(let t of r){if(t==null)continue;let n=t instanceof ArrayBuffer?new Uint8Array(t):typeof t=="string"?new TextEncoder().encode(t):t,i=new Uint8Array(e.length+n.length);i.set(e),i.set(n,e.length),e=i;let a;for(;(a=v(e))!==-1;)yield e.slice(0,a),e=e.slice(a)}e.length>0&&(yield e)}function v(r){for(let n=0;n<r.length-2;n++){if(r[n]===10&&r[n+1]===10||r[n]===13&&r[n+1]===13)return n+2;if(r[n]===13&&r[n+1]===10&&n+3<r.length&&r[n+2]===13&&r[n+3]===10)return n+4}return-1}var l=class{constructor(){this.event=null,this.data=[],this.chunks=[]}decode(e){if(e.endsWith("\r")&&(e=e.substring(0,e.length-1)),!e){if(!this.event&&!this.data.length)return null;let a={event:this.event,data:this.data.join(`
`),raw:this.chunks};return this.event=null,this.data=[],this.chunks=[],a}if(this.chunks.push(e),e.startsWith(":"))return null;let[t,n,i]=S(e,":");return i.startsWith(" ")&&(i=i.substring(1)),t==="event"?this.event=i:t==="data"&&this.data.push(i),null}};function A(r){let e=new u,t=[];for(let n of r)t.push(...e.decode(n));return t}function S(r,e){let t=r.indexOf(e);return t!==-1?[r.substring(0,t),e,r.substring(t+e.length)]:[r,"",""]}function h(r){if(r[Symbol.asyncIterator])return r;let e=r.getReader();return{async next(){try{let t=await e.read();return t?.done&&e.releaseLock(),t}catch(t){throw e.releaseLock(),t}},async return(){let t=e.cancel();return e.releaseLock(),await t,{done:!0,value:void 0}},[Symbol.asyncIterator](){return this}}}export{f as Stream,A as _decodeChunks,g as _iterSSEMessages,h as readableStreamAsyncIterable};
//# sourceMappingURL=streaming.js.map