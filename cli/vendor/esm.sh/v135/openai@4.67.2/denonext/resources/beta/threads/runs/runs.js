/* esm.sh - esbuild bundle(openai@4.67.2/resources/beta/threads/runs/runs) denonext production */
import{APIResource as m}from"/v135/openai@4.67.2/denonext/resource.js";import{isRequestOptions as A}from"/v135/openai@4.67.2/denonext/core.js";import{AssistantStream as h}from"/v135/openai@4.67.2/denonext/lib/AssistantStream.js";import{sleep as I}from"/v135/openai@4.67.2/denonext/core.js";import*as l from"/v135/openai@4.67.2/denonext/resources/beta/threads/runs/steps.js";import{CursorPage as S}from"/v135/openai@4.67.2/denonext/pagination.js";var u=class extends m{constructor(){super(...arguments),this.steps=new l.Steps(this._client)}create(t,s,e){let{include:r,...a}=s;return this._client.post(`/threads/${t}/runs`,{query:{include:r},body:a,...e,headers:{"OpenAI-Beta":"assistants=v2",...e?.headers},stream:s.stream??!1})}retrieve(t,s,e){return this._client.get(`/threads/${t}/runs/${s}`,{...e,headers:{"OpenAI-Beta":"assistants=v2",...e?.headers}})}update(t,s,e,r){return this._client.post(`/threads/${t}/runs/${s}`,{body:e,...r,headers:{"OpenAI-Beta":"assistants=v2",...r?.headers}})}list(t,s={},e){return A(s)?this.list(t,{},s):this._client.getAPIList(`/threads/${t}/runs`,i,{query:s,...e,headers:{"OpenAI-Beta":"assistants=v2",...e?.headers}})}cancel(t,s,e){return this._client.post(`/threads/${t}/runs/${s}/cancel`,{...e,headers:{"OpenAI-Beta":"assistants=v2",...e?.headers}})}async createAndPoll(t,s,e){let r=await this.create(t,s,e);return await this.poll(t,r.id,e)}createAndStream(t,s,e){return h.createAssistantStream(t,this._client.beta.threads.runs,s,e)}async poll(t,s,e){let r={...e?.headers,"X-Stainless-Poll-Helper":"true"};for(e?.pollIntervalMs&&(r["X-Stainless-Custom-Poll-Interval"]=e.pollIntervalMs.toString());;){let{data:a,response:d}=await this.retrieve(t,s,{...e,headers:{...e?.headers,...r}}).withResponse();switch(a.status){case"queued":case"in_progress":case"cancelling":let c=5e3;if(e?.pollIntervalMs)c=e.pollIntervalMs;else{let p=d.headers.get("openai-poll-after-ms");if(p){let o=parseInt(p);isNaN(o)||(c=o)}}await I(c);break;case"requires_action":case"incomplete":case"cancelled":case"completed":case"failed":case"expired":return a}}}stream(t,s,e){return h.createAssistantStream(t,this._client.beta.threads.runs,s,e)}submitToolOutputs(t,s,e,r){return this._client.post(`/threads/${t}/runs/${s}/submit_tool_outputs`,{body:e,...r,headers:{"OpenAI-Beta":"assistants=v2",...r?.headers},stream:e.stream??!1})}async submitToolOutputsAndPoll(t,s,e,r){let a=await this.submitToolOutputs(t,s,e,r);return await this.poll(t,a.id,r)}submitToolOutputsStream(t,s,e,r){return h.createToolAssistantStream(t,s,this._client.beta.threads.runs,e,r)}},i=class extends S{};(function(n){n.RunsPage=i,n.Steps=l.Steps,n.RunStepsPage=l.RunStepsPage})(u||(u={}));export{u as Runs,i as RunsPage};
//# sourceMappingURL=runs.js.map